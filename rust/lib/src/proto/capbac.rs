// This file is generated by rust-protobuf 2.16.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `capbac.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_16_2;

#[derive(PartialEq,Clone,Default)]
pub struct Certificate {
    // message fields
    pub payload: ::std::vec::Vec<u8>,
    pub signature: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Certificate {
    fn default() -> &'a Certificate {
        <Certificate as ::protobuf::Message>::default_instance()
    }
}

impl Certificate {
    pub fn new() -> Certificate {
        ::std::default::Default::default()
    }

    // bytes payload = 1;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }

    // bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Certificate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.payload);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.payload.is_empty() {
            os.write_bytes(1, &self.payload)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(2, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Certificate {
        Certificate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &Certificate| { &m.payload },
                |m: &mut Certificate| { &mut m.payload },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &Certificate| { &m.signature },
                |m: &mut Certificate| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Certificate>(
                "Certificate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Certificate {
        static instance: ::protobuf::rt::LazyV2<Certificate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Certificate::new)
    }
}

impl ::protobuf::Clear for Certificate {
    fn clear(&mut self) {
        self.payload.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Certificate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Certificate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Certificate_Payload {
    // message fields
    pub parent: ::protobuf::SingularPtrField<Certificate>,
    pub capability: ::std::vec::Vec<u8>,
    pub issuer: ::std::string::String,
    pub subject: ::std::string::String,
    pub expiration: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Certificate_Payload {
    fn default() -> &'a Certificate_Payload {
        <Certificate_Payload as ::protobuf::Message>::default_instance()
    }
}

impl Certificate_Payload {
    pub fn new() -> Certificate_Payload {
        ::std::default::Default::default()
    }

    // .capbac.Certificate parent = 1;


    pub fn get_parent(&self) -> &Certificate {
        self.parent.as_ref().unwrap_or_else(|| <Certificate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    pub fn has_parent(&self) -> bool {
        self.parent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: Certificate) {
        self.parent = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut Certificate {
        if self.parent.is_none() {
            self.parent.set_default();
        }
        self.parent.as_mut().unwrap()
    }

    // Take field
    pub fn take_parent(&mut self) -> Certificate {
        self.parent.take().unwrap_or_else(|| Certificate::new())
    }

    // bytes capability = 2;


    pub fn get_capability(&self) -> &[u8] {
        &self.capability
    }
    pub fn clear_capability(&mut self) {
        self.capability.clear();
    }

    // Param is passed by value, moved
    pub fn set_capability(&mut self, v: ::std::vec::Vec<u8>) {
        self.capability = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_capability(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.capability
    }

    // Take field
    pub fn take_capability(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.capability, ::std::vec::Vec::new())
    }

    // string issuer = 3;


    pub fn get_issuer(&self) -> &str {
        &self.issuer
    }
    pub fn clear_issuer(&mut self) {
        self.issuer.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer(&mut self, v: ::std::string::String) {
        self.issuer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer(&mut self) -> &mut ::std::string::String {
        &mut self.issuer
    }

    // Take field
    pub fn take_issuer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer, ::std::string::String::new())
    }

    // string subject = 4;


    pub fn get_subject(&self) -> &str {
        &self.subject
    }
    pub fn clear_subject(&mut self) {
        self.subject.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject(&mut self, v: ::std::string::String) {
        self.subject = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject(&mut self) -> &mut ::std::string::String {
        &mut self.subject
    }

    // Take field
    pub fn take_subject(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subject, ::std::string::String::new())
    }

    // uint64 expiration = 5;


    pub fn get_expiration(&self) -> u64 {
        self.expiration
    }
    pub fn clear_expiration(&mut self) {
        self.expiration = 0;
    }

    // Param is passed by value, moved
    pub fn set_expiration(&mut self, v: u64) {
        self.expiration = v;
    }
}

impl ::protobuf::Message for Certificate_Payload {
    fn is_initialized(&self) -> bool {
        for v in &self.parent {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.parent)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.capability)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subject)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.expiration = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.parent.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.capability.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.capability);
        }
        if !self.issuer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.issuer);
        }
        if !self.subject.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.subject);
        }
        if self.expiration != 0 {
            my_size += ::protobuf::rt::value_size(5, self.expiration, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.parent.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.capability.is_empty() {
            os.write_bytes(2, &self.capability)?;
        }
        if !self.issuer.is_empty() {
            os.write_string(3, &self.issuer)?;
        }
        if !self.subject.is_empty() {
            os.write_string(4, &self.subject)?;
        }
        if self.expiration != 0 {
            os.write_uint64(5, self.expiration)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Certificate_Payload {
        Certificate_Payload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Certificate>>(
                "parent",
                |m: &Certificate_Payload| { &m.parent },
                |m: &mut Certificate_Payload| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "capability",
                |m: &Certificate_Payload| { &m.capability },
                |m: &mut Certificate_Payload| { &mut m.capability },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer",
                |m: &Certificate_Payload| { &m.issuer },
                |m: &mut Certificate_Payload| { &mut m.issuer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "subject",
                |m: &Certificate_Payload| { &m.subject },
                |m: &mut Certificate_Payload| { &mut m.subject },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "expiration",
                |m: &Certificate_Payload| { &m.expiration },
                |m: &mut Certificate_Payload| { &mut m.expiration },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Certificate_Payload>(
                "Certificate.Payload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Certificate_Payload {
        static instance: ::protobuf::rt::LazyV2<Certificate_Payload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Certificate_Payload::new)
    }
}

impl ::protobuf::Clear for Certificate_Payload {
    fn clear(&mut self) {
        self.parent.clear();
        self.capability.clear();
        self.issuer.clear();
        self.subject.clear();
        self.expiration = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Certificate_Payload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Certificate_Payload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Invocation {
    // message fields
    pub payload: ::std::vec::Vec<u8>,
    pub signature: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Invocation {
    fn default() -> &'a Invocation {
        <Invocation as ::protobuf::Message>::default_instance()
    }
}

impl Invocation {
    pub fn new() -> Invocation {
        ::std::default::Default::default()
    }

    // bytes payload = 1;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }

    // bytes signature = 2;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Invocation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.payload);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.payload.is_empty() {
            os.write_bytes(1, &self.payload)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(2, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Invocation {
        Invocation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &Invocation| { &m.payload },
                |m: &mut Invocation| { &mut m.payload },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &Invocation| { &m.signature },
                |m: &mut Invocation| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Invocation>(
                "Invocation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Invocation {
        static instance: ::protobuf::rt::LazyV2<Invocation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Invocation::new)
    }
}

impl ::protobuf::Clear for Invocation {
    fn clear(&mut self) {
        self.payload.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Invocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Invocation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Invocation_Payload {
    // message fields
    pub certificate: ::protobuf::SingularPtrField<Certificate>,
    pub invoker: ::std::string::String,
    pub action: ::std::vec::Vec<u8>,
    pub expiration: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Invocation_Payload {
    fn default() -> &'a Invocation_Payload {
        <Invocation_Payload as ::protobuf::Message>::default_instance()
    }
}

impl Invocation_Payload {
    pub fn new() -> Invocation_Payload {
        ::std::default::Default::default()
    }

    // .capbac.Certificate certificate = 1;


    pub fn get_certificate(&self) -> &Certificate {
        self.certificate.as_ref().unwrap_or_else(|| <Certificate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_certificate(&mut self) {
        self.certificate.clear();
    }

    pub fn has_certificate(&self) -> bool {
        self.certificate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_certificate(&mut self, v: Certificate) {
        self.certificate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_certificate(&mut self) -> &mut Certificate {
        if self.certificate.is_none() {
            self.certificate.set_default();
        }
        self.certificate.as_mut().unwrap()
    }

    // Take field
    pub fn take_certificate(&mut self) -> Certificate {
        self.certificate.take().unwrap_or_else(|| Certificate::new())
    }

    // string invoker = 2;


    pub fn get_invoker(&self) -> &str {
        &self.invoker
    }
    pub fn clear_invoker(&mut self) {
        self.invoker.clear();
    }

    // Param is passed by value, moved
    pub fn set_invoker(&mut self, v: ::std::string::String) {
        self.invoker = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invoker(&mut self) -> &mut ::std::string::String {
        &mut self.invoker
    }

    // Take field
    pub fn take_invoker(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.invoker, ::std::string::String::new())
    }

    // bytes action = 3;


    pub fn get_action(&self) -> &[u8] {
        &self.action
    }
    pub fn clear_action(&mut self) {
        self.action.clear();
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: ::std::vec::Vec<u8>) {
        self.action = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.action
    }

    // Take field
    pub fn take_action(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.action, ::std::vec::Vec::new())
    }

    // uint64 expiration = 4;


    pub fn get_expiration(&self) -> u64 {
        self.expiration
    }
    pub fn clear_expiration(&mut self) {
        self.expiration = 0;
    }

    // Param is passed by value, moved
    pub fn set_expiration(&mut self, v: u64) {
        self.expiration = v;
    }
}

impl ::protobuf::Message for Invocation_Payload {
    fn is_initialized(&self) -> bool {
        for v in &self.certificate {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.certificate)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.invoker)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.action)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.expiration = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.certificate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.invoker.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.invoker);
        }
        if !self.action.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.action);
        }
        if self.expiration != 0 {
            my_size += ::protobuf::rt::value_size(4, self.expiration, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.certificate.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.invoker.is_empty() {
            os.write_string(2, &self.invoker)?;
        }
        if !self.action.is_empty() {
            os.write_bytes(3, &self.action)?;
        }
        if self.expiration != 0 {
            os.write_uint64(4, self.expiration)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Invocation_Payload {
        Invocation_Payload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Certificate>>(
                "certificate",
                |m: &Invocation_Payload| { &m.certificate },
                |m: &mut Invocation_Payload| { &mut m.certificate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "invoker",
                |m: &Invocation_Payload| { &m.invoker },
                |m: &mut Invocation_Payload| { &mut m.invoker },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "action",
                |m: &Invocation_Payload| { &m.action },
                |m: &mut Invocation_Payload| { &mut m.action },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "expiration",
                |m: &Invocation_Payload| { &m.expiration },
                |m: &mut Invocation_Payload| { &mut m.expiration },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Invocation_Payload>(
                "Invocation.Payload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Invocation_Payload {
        static instance: ::protobuf::rt::LazyV2<Invocation_Payload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Invocation_Payload::new)
    }
}

impl ::protobuf::Clear for Invocation_Payload {
    fn clear(&mut self) {
        self.certificate.clear();
        self.invoker.clear();
        self.action.clear();
        self.expiration = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Invocation_Payload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Invocation_Payload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ccapbac.proto\x12\x06capbac\"\xf0\x01\n\x0bCertificate\x12\x18\n\
    \x07payload\x18\x01\x20\x01(\x0cR\x07payload\x12\x1c\n\tsignature\x18\
    \x02\x20\x01(\x0cR\tsignature\x1a\xa8\x01\n\x07Payload\x12+\n\x06parent\
    \x18\x01\x20\x01(\x0b2\x13.capbac.CertificateR\x06parent\x12\x1e\n\ncapa\
    bility\x18\x02\x20\x01(\x0cR\ncapability\x12\x16\n\x06issuer\x18\x03\x20\
    \x01(\tR\x06issuer\x12\x18\n\x07subject\x18\x04\x20\x01(\tR\x07subject\
    \x12\x1e\n\nexpiration\x18\x05\x20\x01(\x04R\nexpiration\"\xd9\x01\n\nIn\
    vocation\x12\x18\n\x07payload\x18\x01\x20\x01(\x0cR\x07payload\x12\x1c\n\
    \tsignature\x18\x02\x20\x01(\x0cR\tsignature\x1a\x92\x01\n\x07Payload\
    \x125\n\x0bcertificate\x18\x01\x20\x01(\x0b2\x13.capbac.CertificateR\x0b\
    certificate\x12\x18\n\x07invoker\x18\x02\x20\x01(\tR\x07invoker\x12\x16\
    \n\x06action\x18\x03\x20\x01(\x0cR\x06action\x12\x1e\n\nexpiration\x18\
    \x04\x20\x01(\x04R\nexpirationB\x1e\n\x0fio.xapix.capbacB\x0bCapBACProto\
    b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
